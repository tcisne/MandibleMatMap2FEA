"""
FEA export utilities for MandibleMatMap2FEA.

This module provides functions for exporting mesh and material properties
to FEA formats, specifically Abaqus INP format.
"""

import numpy as np
import meshio

import numpy as np


def write_inp_file(
    mesh, elastic_moduli, output_file, element_type="C3D4", poissons_ratio=0.3
):
    """
    Write Abaqus INP file with heterogeneous material properties.

    Parameters
    ----------
    mesh : meshio.Mesh
        Volumetric mesh
    elastic_moduli : numpy.ndarray
        Array of elastic moduli for each element
    output_file : str
        Path to output INP file
    element_type : str, optional
        Element type (default: "C3D4" for linear tetrahedral)
    poissons_ratio : float, optional
        Poisson's ratio (default: 0.3)

    Returns
    -------
    None
    """
    # Find tetrahedral elements
    for cell_block in mesh.cells:
        if cell_block.type == "tetra":
            tetra_cells = cell_block.data
            break
    else:
        raise ValueError("No tetrahedral elements found in mesh.")

    # Group elements by similar properties to reduce file size
    property_groups = create_property_groups(elastic_moduli)

    with open(output_file, "w") as f:
        # Write header
        f.write("*Heading\n")
        f.write("Mandible FEA Model generated by MandibleMatMap2FEA\n")

        # Write nodes
        f.write("*Node\n")
        for i, point in enumerate(mesh.points):
            f.write(f"{i + 1}, {point[0]:.6f}, {point[1]:.6f}, {point[2]:.6f}\n")

        # Write elements
        f.write(f"*Element, type={element_type}\n")
        for i, cell in enumerate(tetra_cells):
            f.write(
                f"{i + 1}, {cell[0] + 1}, {cell[1] + 1}, {cell[2] + 1}, {cell[3] + 1}\n"
            )

        # Write material properties
        for group_id, (e_value, element_ids) in enumerate(property_groups.items()):
            # Write material definition
            f.write(f"*Material, name=Mat{group_id + 1}\n")
            f.write("*Elastic\n")
            f.write(f"{e_value:.1f}, {poissons_ratio:.3f}\n")  # E and Poisson's ratio

            # Write element set
            f.write(f"*Elset, elset=Mat{group_id + 1}Set\n")
            # Write 16 element IDs per line
            for i in range(0, len(element_ids), 16):
                line_ids = [str(eid + 1) for eid in element_ids[i : i + 16]]
                f.write(", ".join(line_ids) + "\n")

            # Assign material to element set
            f.write(
                f"*Solid Section, elset=Mat{group_id + 1}Set, material=Mat{group_id + 1}\n"
            )
            f.write("\n")


def create_property_groups(elastic_moduli, tolerance=0.05):
    """
    Group elements by similar elastic moduli to reduce file size.

    Parameters
    ----------
    elastic_moduli : numpy.ndarray
        Array of elastic moduli for each element
    tolerance : float, optional
        Relative tolerance for grouping

    Returns
    -------
    dict
        Dictionary mapping representative elastic modulus to list of element indices
    """
    groups = {}
    for i, e_value in enumerate(elastic_moduli):
        # Find closest existing group
        found = False
        for group_e in list(groups.keys()):
            if abs(group_e - e_value) / group_e < tolerance:
                groups[group_e].append(i)
                found = True
                break

        if not found:
            groups[e_value] = [i]

    return groups


def write_vtk_file(mesh, densities, elastic_moduli, output_file):
    """
    Write VTK file with material properties for visualization.

    Parameters
    ----------
    mesh : meshio.Mesh
        Volumetric mesh
    densities : numpy.ndarray
        Array of densities for each element
    elastic_moduli : numpy.ndarray
        Array of elastic moduli for each element
    output_file : str
        Path to output VTK file

    Returns
    -------
    None
    """
    # Create a new mesh with cell data
    cell_data = {"density": [densities], "elastic_modulus": [elastic_moduli]}

    # Write mesh with cell data
    meshio.write(output_file, mesh, cell_data=cell_data)
